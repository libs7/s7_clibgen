load("@makeheaders//src:RULES.bzl", "makeheaders")

DEPS = [
    "@libs7//src:s7",
    "@gopt//src:gopt",
    "@liblogc//src:logc",
    "@uthash//src:uthash",
]

S7_TOOLS_VERSION = "1.0.0"
GOPT_VERSION = "10.0.0"
LIBS7_VERSION = "0.1.0"
LIBLOGC_VERSION = "1.0.0"
UTHASH_VERSION = "2.3.0"

BASE_INCLUDE_PATHS = [
    "-I$(GENDIR)/src",
    "-I$(GENDIR)/external/s7_tools~{}/src".format(S7_TOOLS_VERSION),
    "-Iexternal/libs7~{}/src".format(LIBS7_VERSION),
    "-I$(GENDIR)/external/libs7~{}/src".format(LIBS7_VERSION),
    "-Iexternal/liblogc~{}/src".format(LIBLOGC_VERSION),
    "-Iexternal/uthash~{}/src".format(UTHASH_VERSION),
    "-Iexternal/gopt~{}/src".format(GOPT_VERSION),
]

COPTS = BASE_INCLUDE_PATHS + [
    "-x", "c",
    "-Wall",
    "-Wextra",
] + select({
    "@platforms//os:macos": [
        "-std=c11",
        "-Werror=pedantic", # not needed with -Werror?
        "-Wpedantic", # same as -pedantic, strict ISO C and ISO C++ warnings
        "-pedantic-errors",
        "-Werror=pedantic",
        # "-Wno-gnu-statement-expression",
        # "-Wno-gnu",
        # "-Wno-format-pedantic",
    ],
    "@platforms//os:linux": [
        "-std=gnu11",
        "-fPIC",
        # GCC:
        "-Werror", # turn all warnings into errors
        "-Wfatal-errors", # stop on first error
        # "-Wl,--no-undefined",
    ],
    "//conditions:default": ["-std=c11"],
})

################################################################
## clibgen - builds s7 batch processor, for processing
## lib*_clibgen.scm to generate c sources.
################################################################
exports_files(["clibgen.scm"]) # visibility for data attrib
cc_binary(
    name  = "clibgen",
    srcs  = ["clibgen.c"],
    deps  = DEPS,
    data = [":clibgen.scm"],
    copts =  COPTS,
    visibility = ["//visibility:public"]
)

################################################################
cc_library(
    name = "clibtest_config",
    linkstatic = True,
    srcs = ["clibtest_config.c", ":mkhdrs"],
    hdrs = [":mkhdrs"],
    deps = DEPS,
    copts = COPTS,
    visibility = ["//visibility:public"]
)

makeheaders(
    name = "mkhdrs",
    hdrs_srcs = ["clibtest_config.c"],
)
